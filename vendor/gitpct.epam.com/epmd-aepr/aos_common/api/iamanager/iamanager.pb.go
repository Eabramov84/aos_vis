// Code generated by protoc-gen-go. DO NOT EDIT.
// source: iamanager.proto

package iamanager // import "gitpct.epam.com/epmd-aepr/aos_common/api/iamanager"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import empty "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetCertTypesRsp struct {
	Types                []string `protobuf:"bytes,1,rep,name=types,proto3" json:"types,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetCertTypesRsp) Reset()         { *m = GetCertTypesRsp{} }
func (m *GetCertTypesRsp) String() string { return proto.CompactTextString(m) }
func (*GetCertTypesRsp) ProtoMessage()    {}
func (*GetCertTypesRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_iamanager_6004f1f30b9e1e6a, []int{0}
}
func (m *GetCertTypesRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetCertTypesRsp.Unmarshal(m, b)
}
func (m *GetCertTypesRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetCertTypesRsp.Marshal(b, m, deterministic)
}
func (dst *GetCertTypesRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCertTypesRsp.Merge(dst, src)
}
func (m *GetCertTypesRsp) XXX_Size() int {
	return xxx_messageInfo_GetCertTypesRsp.Size(m)
}
func (m *GetCertTypesRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCertTypesRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GetCertTypesRsp proto.InternalMessageInfo

func (m *GetCertTypesRsp) GetTypes() []string {
	if m != nil {
		return m.Types
	}
	return nil
}

type ClearReq struct {
	Type                 string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClearReq) Reset()         { *m = ClearReq{} }
func (m *ClearReq) String() string { return proto.CompactTextString(m) }
func (*ClearReq) ProtoMessage()    {}
func (*ClearReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_iamanager_6004f1f30b9e1e6a, []int{1}
}
func (m *ClearReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClearReq.Unmarshal(m, b)
}
func (m *ClearReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClearReq.Marshal(b, m, deterministic)
}
func (dst *ClearReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClearReq.Merge(dst, src)
}
func (m *ClearReq) XXX_Size() int {
	return xxx_messageInfo_ClearReq.Size(m)
}
func (m *ClearReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ClearReq.DiscardUnknown(m)
}

var xxx_messageInfo_ClearReq proto.InternalMessageInfo

func (m *ClearReq) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type SetOwnerReq struct {
	Type                 string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Password             string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetOwnerReq) Reset()         { *m = SetOwnerReq{} }
func (m *SetOwnerReq) String() string { return proto.CompactTextString(m) }
func (*SetOwnerReq) ProtoMessage()    {}
func (*SetOwnerReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_iamanager_6004f1f30b9e1e6a, []int{2}
}
func (m *SetOwnerReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetOwnerReq.Unmarshal(m, b)
}
func (m *SetOwnerReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetOwnerReq.Marshal(b, m, deterministic)
}
func (dst *SetOwnerReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetOwnerReq.Merge(dst, src)
}
func (m *SetOwnerReq) XXX_Size() int {
	return xxx_messageInfo_SetOwnerReq.Size(m)
}
func (m *SetOwnerReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SetOwnerReq.DiscardUnknown(m)
}

var xxx_messageInfo_SetOwnerReq proto.InternalMessageInfo

func (m *SetOwnerReq) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *SetOwnerReq) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type CreateKeyReq struct {
	Type                 string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Password             string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateKeyReq) Reset()         { *m = CreateKeyReq{} }
func (m *CreateKeyReq) String() string { return proto.CompactTextString(m) }
func (*CreateKeyReq) ProtoMessage()    {}
func (*CreateKeyReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_iamanager_6004f1f30b9e1e6a, []int{3}
}
func (m *CreateKeyReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateKeyReq.Unmarshal(m, b)
}
func (m *CreateKeyReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateKeyReq.Marshal(b, m, deterministic)
}
func (dst *CreateKeyReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateKeyReq.Merge(dst, src)
}
func (m *CreateKeyReq) XXX_Size() int {
	return xxx_messageInfo_CreateKeyReq.Size(m)
}
func (m *CreateKeyReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateKeyReq.DiscardUnknown(m)
}

var xxx_messageInfo_CreateKeyReq proto.InternalMessageInfo

func (m *CreateKeyReq) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *CreateKeyReq) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type CreateKeyRsp struct {
	Type                 string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Csr                  string   `protobuf:"bytes,2,opt,name=csr,proto3" json:"csr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateKeyRsp) Reset()         { *m = CreateKeyRsp{} }
func (m *CreateKeyRsp) String() string { return proto.CompactTextString(m) }
func (*CreateKeyRsp) ProtoMessage()    {}
func (*CreateKeyRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_iamanager_6004f1f30b9e1e6a, []int{4}
}
func (m *CreateKeyRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateKeyRsp.Unmarshal(m, b)
}
func (m *CreateKeyRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateKeyRsp.Marshal(b, m, deterministic)
}
func (dst *CreateKeyRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateKeyRsp.Merge(dst, src)
}
func (m *CreateKeyRsp) XXX_Size() int {
	return xxx_messageInfo_CreateKeyRsp.Size(m)
}
func (m *CreateKeyRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateKeyRsp.DiscardUnknown(m)
}

var xxx_messageInfo_CreateKeyRsp proto.InternalMessageInfo

func (m *CreateKeyRsp) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *CreateKeyRsp) GetCsr() string {
	if m != nil {
		return m.Csr
	}
	return ""
}

type ApplyCertReq struct {
	Type                 string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Cert                 string   `protobuf:"bytes,2,opt,name=cert,proto3" json:"cert,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApplyCertReq) Reset()         { *m = ApplyCertReq{} }
func (m *ApplyCertReq) String() string { return proto.CompactTextString(m) }
func (*ApplyCertReq) ProtoMessage()    {}
func (*ApplyCertReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_iamanager_6004f1f30b9e1e6a, []int{5}
}
func (m *ApplyCertReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApplyCertReq.Unmarshal(m, b)
}
func (m *ApplyCertReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApplyCertReq.Marshal(b, m, deterministic)
}
func (dst *ApplyCertReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplyCertReq.Merge(dst, src)
}
func (m *ApplyCertReq) XXX_Size() int {
	return xxx_messageInfo_ApplyCertReq.Size(m)
}
func (m *ApplyCertReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplyCertReq.DiscardUnknown(m)
}

var xxx_messageInfo_ApplyCertReq proto.InternalMessageInfo

func (m *ApplyCertReq) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ApplyCertReq) GetCert() string {
	if m != nil {
		return m.Cert
	}
	return ""
}

type ApplyCertRsp struct {
	Type                 string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	CertUrl              string   `protobuf:"bytes,2,opt,name=cert_url,json=certUrl,proto3" json:"cert_url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApplyCertRsp) Reset()         { *m = ApplyCertRsp{} }
func (m *ApplyCertRsp) String() string { return proto.CompactTextString(m) }
func (*ApplyCertRsp) ProtoMessage()    {}
func (*ApplyCertRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_iamanager_6004f1f30b9e1e6a, []int{6}
}
func (m *ApplyCertRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApplyCertRsp.Unmarshal(m, b)
}
func (m *ApplyCertRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApplyCertRsp.Marshal(b, m, deterministic)
}
func (dst *ApplyCertRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplyCertRsp.Merge(dst, src)
}
func (m *ApplyCertRsp) XXX_Size() int {
	return xxx_messageInfo_ApplyCertRsp.Size(m)
}
func (m *ApplyCertRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplyCertRsp.DiscardUnknown(m)
}

var xxx_messageInfo_ApplyCertRsp proto.InternalMessageInfo

func (m *ApplyCertRsp) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ApplyCertRsp) GetCertUrl() string {
	if m != nil {
		return m.CertUrl
	}
	return ""
}

type GetCertReq struct {
	Type                 string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Issuer               []byte   `protobuf:"bytes,2,opt,name=issuer,proto3" json:"issuer,omitempty"`
	Serial               string   `protobuf:"bytes,3,opt,name=serial,proto3" json:"serial,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetCertReq) Reset()         { *m = GetCertReq{} }
func (m *GetCertReq) String() string { return proto.CompactTextString(m) }
func (*GetCertReq) ProtoMessage()    {}
func (*GetCertReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_iamanager_6004f1f30b9e1e6a, []int{7}
}
func (m *GetCertReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetCertReq.Unmarshal(m, b)
}
func (m *GetCertReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetCertReq.Marshal(b, m, deterministic)
}
func (dst *GetCertReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCertReq.Merge(dst, src)
}
func (m *GetCertReq) XXX_Size() int {
	return xxx_messageInfo_GetCertReq.Size(m)
}
func (m *GetCertReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCertReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetCertReq proto.InternalMessageInfo

func (m *GetCertReq) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *GetCertReq) GetIssuer() []byte {
	if m != nil {
		return m.Issuer
	}
	return nil
}

func (m *GetCertReq) GetSerial() string {
	if m != nil {
		return m.Serial
	}
	return ""
}

type GetCertRsp struct {
	Type                 string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	CertUrl              string   `protobuf:"bytes,2,opt,name=cert_url,json=certUrl,proto3" json:"cert_url,omitempty"`
	KeyUrl               string   `protobuf:"bytes,3,opt,name=key_url,json=keyUrl,proto3" json:"key_url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetCertRsp) Reset()         { *m = GetCertRsp{} }
func (m *GetCertRsp) String() string { return proto.CompactTextString(m) }
func (*GetCertRsp) ProtoMessage()    {}
func (*GetCertRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_iamanager_6004f1f30b9e1e6a, []int{8}
}
func (m *GetCertRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetCertRsp.Unmarshal(m, b)
}
func (m *GetCertRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetCertRsp.Marshal(b, m, deterministic)
}
func (dst *GetCertRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCertRsp.Merge(dst, src)
}
func (m *GetCertRsp) XXX_Size() int {
	return xxx_messageInfo_GetCertRsp.Size(m)
}
func (m *GetCertRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCertRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GetCertRsp proto.InternalMessageInfo

func (m *GetCertRsp) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *GetCertRsp) GetCertUrl() string {
	if m != nil {
		return m.CertUrl
	}
	return ""
}

func (m *GetCertRsp) GetKeyUrl() string {
	if m != nil {
		return m.KeyUrl
	}
	return ""
}

type GetSystemInfoRsp struct {
	SystemId             string   `protobuf:"bytes,1,opt,name=system_id,json=systemId,proto3" json:"system_id,omitempty"`
	BoardModel           string   `protobuf:"bytes,2,opt,name=board_model,json=boardModel,proto3" json:"board_model,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSystemInfoRsp) Reset()         { *m = GetSystemInfoRsp{} }
func (m *GetSystemInfoRsp) String() string { return proto.CompactTextString(m) }
func (*GetSystemInfoRsp) ProtoMessage()    {}
func (*GetSystemInfoRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_iamanager_6004f1f30b9e1e6a, []int{9}
}
func (m *GetSystemInfoRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetSystemInfoRsp.Unmarshal(m, b)
}
func (m *GetSystemInfoRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetSystemInfoRsp.Marshal(b, m, deterministic)
}
func (dst *GetSystemInfoRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSystemInfoRsp.Merge(dst, src)
}
func (m *GetSystemInfoRsp) XXX_Size() int {
	return xxx_messageInfo_GetSystemInfoRsp.Size(m)
}
func (m *GetSystemInfoRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSystemInfoRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GetSystemInfoRsp proto.InternalMessageInfo

func (m *GetSystemInfoRsp) GetSystemId() string {
	if m != nil {
		return m.SystemId
	}
	return ""
}

func (m *GetSystemInfoRsp) GetBoardModel() string {
	if m != nil {
		return m.BoardModel
	}
	return ""
}

type SetUsersReq struct {
	Users                []string `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetUsersReq) Reset()         { *m = SetUsersReq{} }
func (m *SetUsersReq) String() string { return proto.CompactTextString(m) }
func (*SetUsersReq) ProtoMessage()    {}
func (*SetUsersReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_iamanager_6004f1f30b9e1e6a, []int{10}
}
func (m *SetUsersReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetUsersReq.Unmarshal(m, b)
}
func (m *SetUsersReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetUsersReq.Marshal(b, m, deterministic)
}
func (dst *SetUsersReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetUsersReq.Merge(dst, src)
}
func (m *SetUsersReq) XXX_Size() int {
	return xxx_messageInfo_SetUsersReq.Size(m)
}
func (m *SetUsersReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SetUsersReq.DiscardUnknown(m)
}

var xxx_messageInfo_SetUsersReq proto.InternalMessageInfo

func (m *SetUsersReq) GetUsers() []string {
	if m != nil {
		return m.Users
	}
	return nil
}

type GetUsersRsp struct {
	Users                []string `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetUsersRsp) Reset()         { *m = GetUsersRsp{} }
func (m *GetUsersRsp) String() string { return proto.CompactTextString(m) }
func (*GetUsersRsp) ProtoMessage()    {}
func (*GetUsersRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_iamanager_6004f1f30b9e1e6a, []int{11}
}
func (m *GetUsersRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetUsersRsp.Unmarshal(m, b)
}
func (m *GetUsersRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetUsersRsp.Marshal(b, m, deterministic)
}
func (dst *GetUsersRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUsersRsp.Merge(dst, src)
}
func (m *GetUsersRsp) XXX_Size() int {
	return xxx_messageInfo_GetUsersRsp.Size(m)
}
func (m *GetUsersRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUsersRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GetUsersRsp proto.InternalMessageInfo

func (m *GetUsersRsp) GetUsers() []string {
	if m != nil {
		return m.Users
	}
	return nil
}

type UsersChangedNtf struct {
	Users                []string `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UsersChangedNtf) Reset()         { *m = UsersChangedNtf{} }
func (m *UsersChangedNtf) String() string { return proto.CompactTextString(m) }
func (*UsersChangedNtf) ProtoMessage()    {}
func (*UsersChangedNtf) Descriptor() ([]byte, []int) {
	return fileDescriptor_iamanager_6004f1f30b9e1e6a, []int{12}
}
func (m *UsersChangedNtf) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UsersChangedNtf.Unmarshal(m, b)
}
func (m *UsersChangedNtf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UsersChangedNtf.Marshal(b, m, deterministic)
}
func (dst *UsersChangedNtf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UsersChangedNtf.Merge(dst, src)
}
func (m *UsersChangedNtf) XXX_Size() int {
	return xxx_messageInfo_UsersChangedNtf.Size(m)
}
func (m *UsersChangedNtf) XXX_DiscardUnknown() {
	xxx_messageInfo_UsersChangedNtf.DiscardUnknown(m)
}

var xxx_messageInfo_UsersChangedNtf proto.InternalMessageInfo

func (m *UsersChangedNtf) GetUsers() []string {
	if m != nil {
		return m.Users
	}
	return nil
}

type RegisterServiceReq struct {
	ServiceId            string                  `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	Permissions          map[string]*Permissions `protobuf:"bytes,2,rep,name=permissions,proto3" json:"permissions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *RegisterServiceReq) Reset()         { *m = RegisterServiceReq{} }
func (m *RegisterServiceReq) String() string { return proto.CompactTextString(m) }
func (*RegisterServiceReq) ProtoMessage()    {}
func (*RegisterServiceReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_iamanager_6004f1f30b9e1e6a, []int{13}
}
func (m *RegisterServiceReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterServiceReq.Unmarshal(m, b)
}
func (m *RegisterServiceReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterServiceReq.Marshal(b, m, deterministic)
}
func (dst *RegisterServiceReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterServiceReq.Merge(dst, src)
}
func (m *RegisterServiceReq) XXX_Size() int {
	return xxx_messageInfo_RegisterServiceReq.Size(m)
}
func (m *RegisterServiceReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterServiceReq.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterServiceReq proto.InternalMessageInfo

func (m *RegisterServiceReq) GetServiceId() string {
	if m != nil {
		return m.ServiceId
	}
	return ""
}

func (m *RegisterServiceReq) GetPermissions() map[string]*Permissions {
	if m != nil {
		return m.Permissions
	}
	return nil
}

type RegisterServiceRsp struct {
	Secret               string   `protobuf:"bytes,1,opt,name=secret,proto3" json:"secret,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterServiceRsp) Reset()         { *m = RegisterServiceRsp{} }
func (m *RegisterServiceRsp) String() string { return proto.CompactTextString(m) }
func (*RegisterServiceRsp) ProtoMessage()    {}
func (*RegisterServiceRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_iamanager_6004f1f30b9e1e6a, []int{14}
}
func (m *RegisterServiceRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterServiceRsp.Unmarshal(m, b)
}
func (m *RegisterServiceRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterServiceRsp.Marshal(b, m, deterministic)
}
func (dst *RegisterServiceRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterServiceRsp.Merge(dst, src)
}
func (m *RegisterServiceRsp) XXX_Size() int {
	return xxx_messageInfo_RegisterServiceRsp.Size(m)
}
func (m *RegisterServiceRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterServiceRsp.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterServiceRsp proto.InternalMessageInfo

func (m *RegisterServiceRsp) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

type UnregisterServiceReq struct {
	ServiceId            string   `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnregisterServiceReq) Reset()         { *m = UnregisterServiceReq{} }
func (m *UnregisterServiceReq) String() string { return proto.CompactTextString(m) }
func (*UnregisterServiceReq) ProtoMessage()    {}
func (*UnregisterServiceReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_iamanager_6004f1f30b9e1e6a, []int{15}
}
func (m *UnregisterServiceReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnregisterServiceReq.Unmarshal(m, b)
}
func (m *UnregisterServiceReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnregisterServiceReq.Marshal(b, m, deterministic)
}
func (dst *UnregisterServiceReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnregisterServiceReq.Merge(dst, src)
}
func (m *UnregisterServiceReq) XXX_Size() int {
	return xxx_messageInfo_UnregisterServiceReq.Size(m)
}
func (m *UnregisterServiceReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UnregisterServiceReq.DiscardUnknown(m)
}

var xxx_messageInfo_UnregisterServiceReq proto.InternalMessageInfo

func (m *UnregisterServiceReq) GetServiceId() string {
	if m != nil {
		return m.ServiceId
	}
	return ""
}

func init() {
	proto.RegisterType((*GetCertTypesRsp)(nil), "iamanager.GetCertTypesRsp")
	proto.RegisterType((*ClearReq)(nil), "iamanager.ClearReq")
	proto.RegisterType((*SetOwnerReq)(nil), "iamanager.SetOwnerReq")
	proto.RegisterType((*CreateKeyReq)(nil), "iamanager.CreateKeyReq")
	proto.RegisterType((*CreateKeyRsp)(nil), "iamanager.CreateKeyRsp")
	proto.RegisterType((*ApplyCertReq)(nil), "iamanager.ApplyCertReq")
	proto.RegisterType((*ApplyCertRsp)(nil), "iamanager.ApplyCertRsp")
	proto.RegisterType((*GetCertReq)(nil), "iamanager.GetCertReq")
	proto.RegisterType((*GetCertRsp)(nil), "iamanager.GetCertRsp")
	proto.RegisterType((*GetSystemInfoRsp)(nil), "iamanager.GetSystemInfoRsp")
	proto.RegisterType((*SetUsersReq)(nil), "iamanager.SetUsersReq")
	proto.RegisterType((*GetUsersRsp)(nil), "iamanager.GetUsersRsp")
	proto.RegisterType((*UsersChangedNtf)(nil), "iamanager.UsersChangedNtf")
	proto.RegisterType((*RegisterServiceReq)(nil), "iamanager.RegisterServiceReq")
	proto.RegisterMapType((map[string]*Permissions)(nil), "iamanager.RegisterServiceReq.PermissionsEntry")
	proto.RegisterType((*RegisterServiceRsp)(nil), "iamanager.RegisterServiceRsp")
	proto.RegisterType((*UnregisterServiceReq)(nil), "iamanager.UnregisterServiceReq")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// IAManagerClient is the client API for IAManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IAManagerClient interface {
	GetCertTypes(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetCertTypesRsp, error)
	FinishProvisioning(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	Clear(ctx context.Context, in *ClearReq, opts ...grpc.CallOption) (*empty.Empty, error)
	SetOwner(ctx context.Context, in *SetOwnerReq, opts ...grpc.CallOption) (*empty.Empty, error)
	CreateKey(ctx context.Context, in *CreateKeyReq, opts ...grpc.CallOption) (*CreateKeyRsp, error)
	ApplyCert(ctx context.Context, in *ApplyCertReq, opts ...grpc.CallOption) (*ApplyCertRsp, error)
	GetCert(ctx context.Context, in *GetCertReq, opts ...grpc.CallOption) (*GetCertRsp, error)
	GetSystemInfo(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetSystemInfoRsp, error)
	SetUsers(ctx context.Context, in *SetUsersReq, opts ...grpc.CallOption) (*empty.Empty, error)
	GetUsers(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetUsersRsp, error)
	SubscribeUsersChanged(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (IAManager_SubscribeUsersChangedClient, error)
	RegisterService(ctx context.Context, in *RegisterServiceReq, opts ...grpc.CallOption) (*RegisterServiceRsp, error)
	UnregisterService(ctx context.Context, in *UnregisterServiceReq, opts ...grpc.CallOption) (*empty.Empty, error)
}

type iAManagerClient struct {
	cc *grpc.ClientConn
}

func NewIAManagerClient(cc *grpc.ClientConn) IAManagerClient {
	return &iAManagerClient{cc}
}

func (c *iAManagerClient) GetCertTypes(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetCertTypesRsp, error) {
	out := new(GetCertTypesRsp)
	err := c.cc.Invoke(ctx, "/iamanager.IAManager/GetCertTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAManagerClient) FinishProvisioning(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/iamanager.IAManager/FinishProvisioning", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAManagerClient) Clear(ctx context.Context, in *ClearReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/iamanager.IAManager/Clear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAManagerClient) SetOwner(ctx context.Context, in *SetOwnerReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/iamanager.IAManager/SetOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAManagerClient) CreateKey(ctx context.Context, in *CreateKeyReq, opts ...grpc.CallOption) (*CreateKeyRsp, error) {
	out := new(CreateKeyRsp)
	err := c.cc.Invoke(ctx, "/iamanager.IAManager/CreateKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAManagerClient) ApplyCert(ctx context.Context, in *ApplyCertReq, opts ...grpc.CallOption) (*ApplyCertRsp, error) {
	out := new(ApplyCertRsp)
	err := c.cc.Invoke(ctx, "/iamanager.IAManager/ApplyCert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAManagerClient) GetCert(ctx context.Context, in *GetCertReq, opts ...grpc.CallOption) (*GetCertRsp, error) {
	out := new(GetCertRsp)
	err := c.cc.Invoke(ctx, "/iamanager.IAManager/GetCert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAManagerClient) GetSystemInfo(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetSystemInfoRsp, error) {
	out := new(GetSystemInfoRsp)
	err := c.cc.Invoke(ctx, "/iamanager.IAManager/GetSystemInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAManagerClient) SetUsers(ctx context.Context, in *SetUsersReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/iamanager.IAManager/SetUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAManagerClient) GetUsers(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetUsersRsp, error) {
	out := new(GetUsersRsp)
	err := c.cc.Invoke(ctx, "/iamanager.IAManager/GetUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAManagerClient) SubscribeUsersChanged(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (IAManager_SubscribeUsersChangedClient, error) {
	stream, err := c.cc.NewStream(ctx, &_IAManager_serviceDesc.Streams[0], "/iamanager.IAManager/SubscribeUsersChanged", opts...)
	if err != nil {
		return nil, err
	}
	x := &iAManagerSubscribeUsersChangedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type IAManager_SubscribeUsersChangedClient interface {
	Recv() (*UsersChangedNtf, error)
	grpc.ClientStream
}

type iAManagerSubscribeUsersChangedClient struct {
	grpc.ClientStream
}

func (x *iAManagerSubscribeUsersChangedClient) Recv() (*UsersChangedNtf, error) {
	m := new(UsersChangedNtf)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *iAManagerClient) RegisterService(ctx context.Context, in *RegisterServiceReq, opts ...grpc.CallOption) (*RegisterServiceRsp, error) {
	out := new(RegisterServiceRsp)
	err := c.cc.Invoke(ctx, "/iamanager.IAManager/RegisterService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAManagerClient) UnregisterService(ctx context.Context, in *UnregisterServiceReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/iamanager.IAManager/UnregisterService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IAManagerServer is the server API for IAManager service.
type IAManagerServer interface {
	GetCertTypes(context.Context, *empty.Empty) (*GetCertTypesRsp, error)
	FinishProvisioning(context.Context, *empty.Empty) (*empty.Empty, error)
	Clear(context.Context, *ClearReq) (*empty.Empty, error)
	SetOwner(context.Context, *SetOwnerReq) (*empty.Empty, error)
	CreateKey(context.Context, *CreateKeyReq) (*CreateKeyRsp, error)
	ApplyCert(context.Context, *ApplyCertReq) (*ApplyCertRsp, error)
	GetCert(context.Context, *GetCertReq) (*GetCertRsp, error)
	GetSystemInfo(context.Context, *empty.Empty) (*GetSystemInfoRsp, error)
	SetUsers(context.Context, *SetUsersReq) (*empty.Empty, error)
	GetUsers(context.Context, *empty.Empty) (*GetUsersRsp, error)
	SubscribeUsersChanged(*empty.Empty, IAManager_SubscribeUsersChangedServer) error
	RegisterService(context.Context, *RegisterServiceReq) (*RegisterServiceRsp, error)
	UnregisterService(context.Context, *UnregisterServiceReq) (*empty.Empty, error)
}

func RegisterIAManagerServer(s *grpc.Server, srv IAManagerServer) {
	s.RegisterService(&_IAManager_serviceDesc, srv)
}

func _IAManager_GetCertTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAManagerServer).GetCertTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iamanager.IAManager/GetCertTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAManagerServer).GetCertTypes(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAManager_FinishProvisioning_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAManagerServer).FinishProvisioning(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iamanager.IAManager/FinishProvisioning",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAManagerServer).FinishProvisioning(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAManager_Clear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAManagerServer).Clear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iamanager.IAManager/Clear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAManagerServer).Clear(ctx, req.(*ClearReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAManager_SetOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetOwnerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAManagerServer).SetOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iamanager.IAManager/SetOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAManagerServer).SetOwner(ctx, req.(*SetOwnerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAManager_CreateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAManagerServer).CreateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iamanager.IAManager/CreateKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAManagerServer).CreateKey(ctx, req.(*CreateKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAManager_ApplyCert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyCertReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAManagerServer).ApplyCert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iamanager.IAManager/ApplyCert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAManagerServer).ApplyCert(ctx, req.(*ApplyCertReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAManager_GetCert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCertReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAManagerServer).GetCert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iamanager.IAManager/GetCert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAManagerServer).GetCert(ctx, req.(*GetCertReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAManager_GetSystemInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAManagerServer).GetSystemInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iamanager.IAManager/GetSystemInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAManagerServer).GetSystemInfo(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAManager_SetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUsersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAManagerServer).SetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iamanager.IAManager/SetUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAManagerServer).SetUsers(ctx, req.(*SetUsersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAManager_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAManagerServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iamanager.IAManager/GetUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAManagerServer).GetUsers(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAManager_SubscribeUsersChanged_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IAManagerServer).SubscribeUsersChanged(m, &iAManagerSubscribeUsersChangedServer{stream})
}

type IAManager_SubscribeUsersChangedServer interface {
	Send(*UsersChangedNtf) error
	grpc.ServerStream
}

type iAManagerSubscribeUsersChangedServer struct {
	grpc.ServerStream
}

func (x *iAManagerSubscribeUsersChangedServer) Send(m *UsersChangedNtf) error {
	return x.ServerStream.SendMsg(m)
}

func _IAManager_RegisterService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterServiceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAManagerServer).RegisterService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iamanager.IAManager/RegisterService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAManagerServer).RegisterService(ctx, req.(*RegisterServiceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAManager_UnregisterService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterServiceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAManagerServer).UnregisterService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iamanager.IAManager/UnregisterService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAManagerServer).UnregisterService(ctx, req.(*UnregisterServiceReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _IAManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "iamanager.IAManager",
	HandlerType: (*IAManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCertTypes",
			Handler:    _IAManager_GetCertTypes_Handler,
		},
		{
			MethodName: "FinishProvisioning",
			Handler:    _IAManager_FinishProvisioning_Handler,
		},
		{
			MethodName: "Clear",
			Handler:    _IAManager_Clear_Handler,
		},
		{
			MethodName: "SetOwner",
			Handler:    _IAManager_SetOwner_Handler,
		},
		{
			MethodName: "CreateKey",
			Handler:    _IAManager_CreateKey_Handler,
		},
		{
			MethodName: "ApplyCert",
			Handler:    _IAManager_ApplyCert_Handler,
		},
		{
			MethodName: "GetCert",
			Handler:    _IAManager_GetCert_Handler,
		},
		{
			MethodName: "GetSystemInfo",
			Handler:    _IAManager_GetSystemInfo_Handler,
		},
		{
			MethodName: "SetUsers",
			Handler:    _IAManager_SetUsers_Handler,
		},
		{
			MethodName: "GetUsers",
			Handler:    _IAManager_GetUsers_Handler,
		},
		{
			MethodName: "RegisterService",
			Handler:    _IAManager_RegisterService_Handler,
		},
		{
			MethodName: "UnregisterService",
			Handler:    _IAManager_UnregisterService_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeUsersChanged",
			Handler:       _IAManager_SubscribeUsersChanged_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "iamanager.proto",
}

func init() { proto.RegisterFile("iamanager.proto", fileDescriptor_iamanager_6004f1f30b9e1e6a) }

var fileDescriptor_iamanager_6004f1f30b9e1e6a = []byte{
	// 769 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0xdd, 0x4f, 0xe3, 0x46,
	0x10, 0x4f, 0x08, 0x21, 0xf1, 0x24, 0x55, 0xe8, 0x96, 0x8f, 0xd4, 0x88, 0x82, 0xdc, 0x07, 0x78,
	0xa0, 0x4e, 0x95, 0x52, 0xd4, 0x56, 0xa5, 0x88, 0xa6, 0x10, 0x45, 0x15, 0x90, 0x73, 0xe0, 0x1e,
	0xee, 0x25, 0x72, 0xec, 0x21, 0x58, 0xc4, 0x1f, 0xb7, 0xbb, 0x01, 0xf9, 0xfd, 0xfe, 0xcd, 0xfb,
	0x5f, 0x4e, 0xbb, 0xb6, 0x13, 0xe7, 0xc3, 0xd1, 0x71, 0x6f, 0x3b, 0xb3, 0xbf, 0xdf, 0xcc, 0xec,
	0x78, 0xe6, 0x67, 0xa8, 0x39, 0xa6, 0x6b, 0x7a, 0xe6, 0x10, 0xa9, 0x1e, 0x50, 0x9f, 0xfb, 0x44,
	0x99, 0x38, 0xd4, 0xbd, 0xa1, 0xef, 0x0f, 0x47, 0xd8, 0x90, 0x17, 0x83, 0xf1, 0x63, 0x03, 0xdd,
	0x80, 0x87, 0x11, 0x4e, 0xdd, 0x9e, 0xe0, 0x2c, 0xdf, 0x75, 0x7d, 0x2f, 0x72, 0x6b, 0x47, 0x50,
	0x6b, 0x23, 0x6f, 0x21, 0xe5, 0xf7, 0x61, 0x80, 0xcc, 0x60, 0x01, 0xd9, 0x82, 0x22, 0x17, 0xe7,
	0x7a, 0xfe, 0xb0, 0x70, 0xac, 0x18, 0x91, 0xa1, 0xfd, 0x04, 0xe5, 0xd6, 0x08, 0x4d, 0x6a, 0xe0,
	0x47, 0x42, 0x60, 0x5d, 0x38, 0xeb, 0xf9, 0xc3, 0xfc, 0xb1, 0x62, 0xc8, 0xb3, 0x76, 0x0e, 0x95,
	0x1e, 0xf2, 0xbb, 0x57, 0x0f, 0xb3, 0x20, 0x44, 0x85, 0x72, 0x60, 0x32, 0xf6, 0xea, 0x53, 0xbb,
	0xbe, 0x26, 0xfd, 0x13, 0x5b, 0xfb, 0x07, 0xaa, 0x2d, 0x8a, 0x26, 0xc7, 0xff, 0x31, 0xfc, 0x16,
	0xfe, 0x69, 0x9a, 0xcf, 0x82, 0xa5, 0xfc, 0x4d, 0x28, 0x58, 0x8c, 0xc6, 0x54, 0x71, 0xd4, 0xce,
	0xa0, 0x7a, 0x19, 0x04, 0xa3, 0x50, 0xbc, 0x3f, 0x2b, 0x2b, 0x81, 0x75, 0x0b, 0x29, 0x8f, 0x69,
	0xf2, 0xac, 0x9d, 0xa7, 0x79, 0x19, 0xd9, 0x7e, 0x84, 0xb2, 0xc0, 0xf6, 0xc7, 0x74, 0x14, 0x73,
	0x4b, 0xc2, 0x7e, 0xa0, 0x23, 0xad, 0x0b, 0x10, 0x37, 0x3d, 0x2b, 0xe9, 0x0e, 0x6c, 0x38, 0x8c,
	0x8d, 0x31, 0xaa, 0xb6, 0x6a, 0xc4, 0x96, 0xf0, 0x33, 0xa4, 0x8e, 0x39, 0xaa, 0x17, 0x24, 0x3a,
	0xb6, 0xb4, 0xfb, 0x69, 0xc4, 0x37, 0x97, 0x43, 0x76, 0xa1, 0xf4, 0x8c, 0xa1, 0xbc, 0x89, 0xa3,
	0x3e, 0x63, 0x18, 0xd5, 0xb9, 0xd9, 0x46, 0xde, 0x0b, 0x19, 0x47, 0xb7, 0xe3, 0x3d, 0xfa, 0x22,
	0xf6, 0x1e, 0x28, 0x4c, 0x3a, 0xfa, 0x8e, 0x1d, 0x27, 0x28, 0x47, 0x8e, 0x8e, 0x4d, 0x0e, 0xa0,
	0x32, 0xf0, 0x4d, 0x6a, 0xf7, 0x5d, 0xdf, 0xc6, 0x24, 0x0f, 0x48, 0xd7, 0x8d, 0xf0, 0x68, 0x3f,
	0xcb, 0x29, 0x79, 0x60, 0x48, 0x99, 0x78, 0xfa, 0x16, 0x14, 0xc7, 0xe2, 0x9c, 0x8c, 0x9a, 0x34,
	0x04, 0xa8, 0x9d, 0x80, 0xa2, 0x79, 0x5c, 0x02, 0x3a, 0x82, 0x9a, 0x44, 0xb4, 0x9e, 0x4c, 0x6f,
	0x88, 0xf6, 0x2d, 0x7f, 0xcc, 0x00, 0x7e, 0xce, 0x03, 0x31, 0x70, 0xe8, 0x30, 0x8e, 0xb4, 0x87,
	0xf4, 0xc5, 0xb1, 0x50, 0xa4, 0xde, 0x07, 0x60, 0x91, 0x35, 0x7d, 0x88, 0x12, 0x7b, 0x3a, 0x36,
	0xe9, 0x42, 0x25, 0x40, 0xea, 0x3a, 0x8c, 0x39, 0xbe, 0xc7, 0xea, 0x6b, 0x87, 0x85, 0xe3, 0x4a,
	0x53, 0xd7, 0xa7, 0xdb, 0xb7, 0x18, 0x52, 0xef, 0x4e, 0x09, 0x57, 0x1e, 0xa7, 0xa1, 0x91, 0x0e,
	0xa1, 0xbe, 0x87, 0xcd, 0x79, 0x80, 0x98, 0xc8, 0x67, 0x0c, 0xe3, 0xec, 0xe2, 0x48, 0x4e, 0xa0,
	0xf8, 0x62, 0x8e, 0xc6, 0x28, 0x7b, 0x57, 0x69, 0xee, 0xa4, 0x32, 0xa6, 0xd8, 0x46, 0x04, 0xfa,
	0x6b, 0xed, 0x8f, 0xbc, 0x76, 0xb2, 0xf8, 0x3c, 0x16, 0x44, 0x83, 0x62, 0x51, 0xe4, 0x71, 0xf0,
	0xd8, 0xd2, 0x7e, 0x87, 0xad, 0x07, 0x8f, 0xbe, 0xb5, 0x1d, 0xcd, 0x4f, 0x25, 0x50, 0x3a, 0x97,
	0x37, 0x51, 0x25, 0xe4, 0x3f, 0xa8, 0xa6, 0x45, 0x83, 0xec, 0xe8, 0x91, 0xf2, 0xe8, 0x89, 0xf2,
	0xe8, 0x57, 0x42, 0x79, 0x54, 0x35, 0x55, 0xfd, 0x9c, 0xca, 0x68, 0x39, 0x72, 0x0d, 0xe4, 0xda,
	0xf1, 0x1c, 0xf6, 0xd4, 0xa5, 0xfe, 0x8b, 0x23, 0xde, 0xe5, 0x78, 0xc3, 0xcc, 0x58, 0x19, 0x7e,
	0x2d, 0x47, 0xce, 0xa0, 0x28, 0x95, 0x89, 0xfc, 0x90, 0x4a, 0x97, 0x68, 0xd5, 0x0a, 0xde, 0xdf,
	0x50, 0x4e, 0x14, 0x8b, 0xa4, 0xfb, 0x9c, 0x92, 0xb1, 0x15, 0xec, 0x0b, 0x50, 0x26, 0x82, 0x43,
	0x76, 0xd3, 0x99, 0x53, 0x32, 0xa6, 0x2e, 0xbf, 0x90, 0xcf, 0xbf, 0x00, 0x65, 0xa2, 0x21, 0x33,
	0x01, 0xd2, 0x8a, 0xa4, 0x2e, 0xbf, 0x90, 0x01, 0xfe, 0x84, 0x52, 0xdc, 0x54, 0xb2, 0xbd, 0xd8,
	0x68, 0x41, 0x5e, 0xe6, 0x8e, 0x5b, 0xff, 0xdd, 0xcc, 0x62, 0x67, 0x76, 0x7d, 0x6f, 0x36, 0xc2,
	0x8c, 0x14, 0x4c, 0x5a, 0x28, 0xf7, 0x70, 0xbe, 0x85, 0xc9, 0x8e, 0xaf, 0xfe, 0x00, 0xed, 0x29,
	0x3b, 0xeb, 0xb3, 0xcf, 0x14, 0x90, 0x88, 0x82, 0x96, 0x23, 0x77, 0xb0, 0xdd, 0x1b, 0x0f, 0x98,
	0x45, 0x9d, 0x01, 0xa6, 0x95, 0xe0, 0xab, 0xa6, 0x71, 0x4e, 0x3a, 0xb4, 0xdc, 0xaf, 0x79, 0xf2,
	0x0e, 0x6a, 0x73, 0x8b, 0x44, 0xf6, 0x57, 0x2e, 0xbc, 0xba, 0xea, 0x5a, 0xd6, 0x78, 0x0b, 0xdf,
	0x2f, 0x6c, 0x1b, 0x39, 0x48, 0xd7, 0xb1, 0x64, 0x17, 0xb3, 0x3b, 0xf6, 0xef, 0xe9, 0x87, 0xe6,
	0xd0, 0xe1, 0x81, 0xc5, 0x75, 0x0c, 0x4c, 0x57, 0xb7, 0x7c, 0xb7, 0x81, 0x81, 0x6b, 0xff, 0x62,
	0x62, 0x40, 0x1b, 0xa6, 0xcf, 0xfa, 0xd1, 0xbf, 0xbd, 0x61, 0x06, 0x4e, 0x63, 0x92, 0x64, 0xb0,
	0x21, 0xe3, 0xfc, 0xf6, 0x25, 0x00, 0x00, 0xff, 0xff, 0x8b, 0x06, 0xab, 0xcc, 0x3c, 0x08, 0x00,
	0x00,
}
